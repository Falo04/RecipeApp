/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed Galvyn API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateOrUpdateRecipe,
  CreateRecipe200Response,
  FormErrorResponseForCreateOrUpdateRecipeErrors,
  FullRecipe,
  GetAllRecipesRequest,
  PageForSimpleRecipeWithTags,
} from '../models/index';

export interface CreateRecipeRequest {
    CreateOrUpdateRecipe?: CreateOrUpdateRecipe;
}

export interface DeleteRecipeRequest {
    uuid: string;
}

export interface GetAllRecipesOperationRequest {
    GetAllRecipesRequest?: GetAllRecipesRequest;
}

export interface GetRecipeRequest {
    uuid: string;
}

export interface UpdateRecipeRequest {
    uuid: string;
    CreateOrUpdateRecipe?: CreateOrUpdateRecipe;
}

/**
 * 
 */
export class RecipesApi extends runtime.BaseAPI {

    /**
     * Creates a new recipe.
     * Creates a new recipe.
     */
    async createRecipeRaw(requestParameters: CreateRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRecipe200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/recipes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateOrUpdateRecipe'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new recipe.
     * Creates a new recipe.
     */
    async createRecipe(requestParameters: CreateRecipeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRecipe200Response> {
        const response = await this.createRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a recipe by its UUID.
     * Deletes a recipe by its UUID.
     */
    async deleteRecipeRaw(requestParameters: DeleteRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deleteRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/recipes/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a recipe by its UUID.
     * Deletes a recipe by its UUID.
     */
    async deleteRecipe(requestParameters: DeleteRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecipeRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all recipes with pagination support and associated tags.
     * Retrieves all recipes with pagination support and associated tags.
     */
    async getAllRecipesRaw(requestParameters: GetAllRecipesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageForSimpleRecipeWithTags>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/recipes/all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['GetAllRecipesRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all recipes with pagination support and associated tags.
     * Retrieves all recipes with pagination support and associated tags.
     */
    async getAllRecipes(requestParameters: GetAllRecipesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageForSimpleRecipeWithTags> {
        const response = await this.getAllRecipesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a recipe by its UUID.
     * Retrieves a recipe by its UUID.
     */
    async getRecipeRaw(requestParameters: GetRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullRecipe>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/recipes/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a recipe by its UUID.
     * Retrieves a recipe by its UUID.
     */
    async getRecipe(requestParameters: GetRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullRecipe> {
        const response = await this.getRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing recipe based on its UUID.
     * Updates an existing recipe based on its UUID.
     */
    async updateRecipeRaw(requestParameters: UpdateRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormErrorResponseForCreateOrUpdateRecipeErrors>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling updateRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/recipes/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateOrUpdateRecipe'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates an existing recipe based on its UUID.
     * Updates an existing recipe based on its UUID.
     */
    async updateRecipe(requestParameters: UpdateRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormErrorResponseForCreateOrUpdateRecipeErrors> {
        const response = await this.updateRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
