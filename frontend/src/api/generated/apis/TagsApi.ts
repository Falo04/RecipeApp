/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed Galvyn API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateOrUpdateTag,
  CreateTag200Response,
  FormErrorResponseForCreateOrUpdateTagErrors,
  GetAllRecipesRequest,
  GetAllTagsRequest,
  PageForSimpleRecipeWithTags,
  PageForSimpleTag,
} from '../models/index';

export interface CreateTagRequest {
    CreateOrUpdateTag?: CreateOrUpdateTag;
}

export interface DeleteTagRequest {
    uuid: string;
}

export interface GetAllTagsOperationRequest {
    GetAllTagsRequest?: GetAllTagsRequest;
}

export interface GetRecipesByTagRequest {
    uuid: string;
    GetAllRecipesRequest?: GetAllRecipesRequest;
}

export interface UpdateTagRequest {
    uuid: string;
    CreateOrUpdateTag?: CreateOrUpdateTag;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Creates a tag.
     * Creates a tag.
     */
    async createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTag200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateOrUpdateTag'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a tag.
     * Creates a tag.
     */
    async createTag(requestParameters: CreateTagRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTag200Response> {
        const response = await this.createTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tag.
     * Delete a tag.
     */
    async deleteTagRaw(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deleteTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/tags/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a tag.
     * Delete a tag.
     */
    async deleteTag(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all tags with pagination support.
     * Retrieves all tags with pagination support.
     */
    async getAllTagsRaw(requestParameters: GetAllTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageForSimpleTag>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/tags/all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['GetAllTagsRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all tags with pagination support.
     * Retrieves all tags with pagination support.
     */
    async getAllTags(requestParameters: GetAllTagsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageForSimpleTag> {
        const response = await this.getAllTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of recipes associated with a specific tag.
     * Retrieves a paginated list of recipes associated with a specific tag.
     */
    async getRecipesByTagRaw(requestParameters: GetRecipesByTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageForSimpleRecipeWithTags>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getRecipesByTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/tags/{uuid}/recipes`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['GetAllRecipesRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a paginated list of recipes associated with a specific tag.
     * Retrieves a paginated list of recipes associated with a specific tag.
     */
    async getRecipesByTag(requestParameters: GetRecipesByTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageForSimpleRecipeWithTags> {
        const response = await this.getRecipesByTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a tag.
     * Update a tag.
     */
    async updateTagRaw(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormErrorResponseForCreateOrUpdateTagErrors>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling updateTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/tags/{uuid}`;
        urlPath = urlPath.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateOrUpdateTag'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a tag.
     * Update a tag.
     */
    async updateTag(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormErrorResponseForCreateOrUpdateTagErrors> {
        const response = await this.updateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
